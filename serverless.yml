# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mealfu

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  memorySize: 256
  timeout: 15
  vpc:
    securityGroupIds:
      - sg-0fbeac09135fb5e5d
    subnetIds:
      - subnet-aec74ac7
      - subnet-bc3624f1
      - subnet-3e02ce44
  region: eu-west-2
  environment:
    AWS_ACCOUNT: 718181789372
    FUNCTION_ARNS: "arn:aws:lambda:${self:provider.region}:${self:provider.environment.AWS_ACCOUNT}:function:${self:service}-${self:provider.stage}-*"

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: lambda/build/distributions/mealfu-lambda.zip

functions:
  hello:
    handler: mealfu.Handler
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_PORT: ${env:DB_PORT}
      DB_DATABASE: ${env:DB_DATABASE}
      DB_USERNAME: ${env:DB_USERNAME}
      DB_PASSWORD: ${env:DB_PASSWORD}
      DB_SCHEMA: ${env:DB_SCHEMA}

    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
          integration: lambda-proxy
          authorizer: aws_iam


# you can add CloudFormation resource templates here
resources:
  Resources:
    # https://forum.serverless.com/t/cognito-user-identity-pools-as-serverless-yml-resource-defs/2050/14
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: $<self:service>Identity
        AllowUnauthenticatedIdentities: false
        OpenIdConnectProviderARNs:
          # Create at https://console.aws.amazon.com/iam/home#/providers
          - 'arn:aws:iam::${self:provider.environment.AWS_ACCOUNT}:oidc-provider/accounts.google.com'

    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "${self:provider.environment.FUNCTION_ARNS}"

    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
              'Fn::GetAtt': [ CognitoAuthorizedRole, Arn ]
  Outputs:
     IdentityPoolId:
       Value:
         Ref: IdentityPool
       Export:
         Name: "IdentityPool::Id"

plugins:
  - serverless-prune-plugin
  - serverless-sam

custom:
  prune:
    automatic: true
    number: 3
